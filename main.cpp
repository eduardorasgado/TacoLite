#include <iostream>
#include <vector>

#include "TacoLite.h"

// to be able ti string without not converting types to string
// Type in the TacoLite library
static char const * TypeName(Type const type)
{
    //printing over the own type
    switch(type)
    {
        // to prove dynamic type insertion in statements
        case Type::Integer: return "Integer";
        case Type::Blob: return "Blob";
        case Type::Float: return "Float";
        case Type::Null: return "Null";
        case Type::Text: return "Text";
    }
    // in case it fails
    assert(false);
    return "Invalid";
}

int main() {
    // Exaple using TACO LITE.

    std::cout << "Welcome to SQLite integration!" << std::endl;

    try {
        // creating a database entirely in memory
        //Connection connection = Connection::Memory();
        // traditional database file
        Connection connection("/home/cheetos/Developer/CProgramming/TacoLite/test.db");
        // creating table
        // taking RowId autogenerated by sqlite as Id
        Execute(connection, "create table Users (Name text, Age integer, Weight real)");

        Statement insert(connection, "insert into Users (Name, Age, Weight) values (?1, ?2, ?3)");

        // inserting data
        // avoid flushing in memory cause slow transactions
        Execute(connection, "begin");

        // transctions can be accomplished by reseting the insert object
        for(int i = 0;  i < 1000; ++i)
        {
            // reset the sqlite state machine and BindAll at the same time
            insert.Reset("Eduardo", i, 70.43);

            // Execute method calls the step -> initialize the transaction
            insert.Execute();
            std::cout << "Inserted item: " << connection.RowId() << "\n";
        }

        // end transaction, all changes after this will be discarted
        Execute(connection, "commit");

        // counting the nummber of rows
        Statement count(connection, "select count(*) from Users");
        //executing the statement
        count.Step();
        std::cout << "Rows: " << count.GetInt() << std::endl;

    } catch(Exception const & e)
    {
        // c_str: Returns a pointer to an array that contains a
        // null-terminated sequence of characters (i.e., a C-string) representing the current value of the string object.
        std::cout << "Error: " << e.Message.c_str() << " => " << e.Result;
    }
    std::cout << "\nGood bye! [CONNECTION CLOSED]" << std::endl;
    return 0;
}